!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DllMain	mxml-private.c	/^DllMain(HINSTANCE hinst,		\/* I - DLL module handle *\/$/;"	f
ENCODE_UTF16BE	mxml-file.c	71;"	d	file:
ENCODE_UTF16LE	mxml-file.c	72;"	d	file:
ENCODE_UTF8	mxml-file.c	70;"	d	file:
HAVE_PTHREAD_H	config.h	64;"	d
HAVE_SNPRINTF	config.h	49;"	d
HAVE_STRDUP	config.h	57;"	d
HAVE_VSNPRINTF	config.h	50;"	d
MXML_ADD_AFTER	mxml.h	69;"	d
MXML_ADD_BEFORE	mxml.h	68;"	d
MXML_ADD_TO_PARENT	mxml.h	70;"	d
MXML_CUSTOM	mxml.h	/^  MXML_CUSTOM				\/* Custom data @since Mini-XML 2.1@ *\/$/;"	e	enum:mxml_type_e
MXML_DESCEND	mxml.h	59;"	d
MXML_DESCEND_FIRST	mxml.h	61;"	d
MXML_ELEMENT	mxml.h	/^  MXML_ELEMENT,				\/* XML element with attributes *\/$/;"	e	enum:mxml_type_e
MXML_IGNORE	mxml.h	/^  MXML_IGNORE = -1,			\/* Ignore\/throw away node @since Mini-XML 2.3@ *\/$/;"	e	enum:mxml_type_e
MXML_IGNORE_CALLBACK	mxml.h	54;"	d
MXML_INTEGER	mxml.h	/^  MXML_INTEGER,				\/* Integer value *\/$/;"	e	enum:mxml_type_e
MXML_INTEGER_CALLBACK	mxml.h	47;"	d
MXML_NO_CALLBACK	mxml.h	46;"	d
MXML_NO_DESCEND	mxml.h	60;"	d
MXML_NO_PARENT	mxml.h	57;"	d
MXML_OPAQUE	mxml.h	/^  MXML_OPAQUE,				\/* Opaque string *\/$/;"	e	enum:mxml_type_e
MXML_OPAQUE_CALLBACK	mxml.h	49;"	d
MXML_REAL	mxml.h	/^  MXML_REAL,				\/* Real value *\/$/;"	e	enum:mxml_type_e
MXML_REAL_CALLBACK	mxml.h	51;"	d
MXML_SAX_CDATA	mxml.h	/^  MXML_SAX_CDATA,			\/* CDATA node *\/$/;"	e	enum:mxml_sax_event_e
MXML_SAX_COMMENT	mxml.h	/^  MXML_SAX_COMMENT,			\/* Comment node *\/$/;"	e	enum:mxml_sax_event_e
MXML_SAX_DATA	mxml.h	/^  MXML_SAX_DATA,			\/* Data node *\/$/;"	e	enum:mxml_sax_event_e
MXML_SAX_DIRECTIVE	mxml.h	/^  MXML_SAX_DIRECTIVE,			\/* Processing directive node *\/$/;"	e	enum:mxml_sax_event_e
MXML_SAX_ELEMENT_CLOSE	mxml.h	/^  MXML_SAX_ELEMENT_CLOSE,		\/* Element closed *\/$/;"	e	enum:mxml_sax_event_e
MXML_SAX_ELEMENT_OPEN	mxml.h	/^  MXML_SAX_ELEMENT_OPEN			\/* Element opened *\/$/;"	e	enum:mxml_sax_event_e
MXML_TAB	mxml.h	44;"	d
MXML_TEXT	mxml.h	/^  MXML_TEXT,				\/* Text fragment *\/$/;"	e	enum:mxml_type_e
MXML_TEXT_CALLBACK	mxml.h	53;"	d
MXML_VERSION	config.h	35;"	d
MXML_WS_AFTER_CLOSE	mxml.h	66;"	d
MXML_WS_AFTER_OPEN	mxml.h	64;"	d
MXML_WS_BEFORE_CLOSE	mxml.h	65;"	d
MXML_WS_BEFORE_OPEN	mxml.h	63;"	d
OUTPUT_HTML	mxmldoc.c	148;"	d	file:
OUTPUT_MAN	mxmldoc.c	149;"	d	file:
OUTPUT_NONE	mxmldoc.c	147;"	d	file:
O_BINARY	testmxml.c	40;"	d	file:
STATE_CHARACTER	mxmldoc.c	139;"	d	file:
STATE_CXX_COMMENT	mxmldoc.c	137;"	d	file:
STATE_C_COMMENT	mxmldoc.c	136;"	d	file:
STATE_IDENTIFIER	mxmldoc.c	140;"	d	file:
STATE_NONE	mxmldoc.c	134;"	d	file:
STATE_PREPROCESSOR	mxmldoc.c	135;"	d	file:
STATE_STRING	mxmldoc.c	138;"	d	file:
_mxml_destructor	mxml-private.c	/^_mxml_destructor(void *g)		\/* I - Global data *\/$/;"	f	file:
_mxml_entity_cb	mxml-entity.c	/^_mxml_entity_cb(const char *name)	\/* I - Entity name *\/$/;"	f
_mxml_fdbuf_s	mxml-file.c	/^typedef struct _mxml_fdbuf_s                \/**** File descriptor buffer ****\/$/;"	s	file:
_mxml_fdbuf_t	mxml-file.c	/^} _mxml_fdbuf_t;$/;"	t	typeref:struct:_mxml_fdbuf_s	file:
_mxml_getc_cb_t	mxml-file.c	/^typedef int (*_mxml_getc_cb_t)(void *, int *);$/;"	t	file:
_mxml_global	mxml-private.c	/^_mxml_global(void)$/;"	f
_mxml_global_s	mxml-private.h	/^typedef struct _mxml_global_s$/;"	s
_mxml_global_t	mxml-private.h	/^} _mxml_global_t;$/;"	t	typeref:struct:_mxml_global_s
_mxml_h_	mxml.h	24;"	d
_mxml_init	mxml-private.c	/^_mxml_init(void)$/;"	f	file:
_mxml_key	mxml-private.c	/^static pthread_key_t	_mxml_key = -1;	\/* Thread local storage key *\/$/;"	v	file:
_mxml_key_once	mxml-private.c	/^static pthread_once_t	_mxml_key_once = PTHREAD_ONCE_INIT;$/;"	v	file:
_mxml_putc_cb_t	mxml-file.c	/^typedef int (*_mxml_putc_cb_t)(int, void *);$/;"	t	file:
_mxml_snprintf	mxml-string.c	/^_mxml_snprintf(char       *buffer,	\/* I - Output buffer *\/$/;"	f
_mxml_strdup	mxml-string.c	/^_mxml_strdup(const char *s)		\/* I - String to duplicate *\/$/;"	f
_mxml_strdupf	mxml-string.c	/^_mxml_strdupf(const char *format,	\/* I - Printf-style format string *\/$/;"	f
_mxml_tls_index	mxml-private.c	/^static DWORD _mxml_tls_index;		\/* Index for global storage *\/$/;"	v	file:
_mxml_vsnprintf	mxml-string.c	/^_mxml_vsnprintf(char       *buffer,	\/* O - Output buffer *\/$/;"	f
_mxml_vstrdupf	mxml-string.c	/^_mxml_vstrdupf(const char *format,	\/* I - Printf-style format string *\/$/;"	f
add_variable	mxmldoc.c	/^add_variable(mxml_node_t *parent,	\/* I - Parent node *\/$/;"	f	file:
alloc_nodes	mxml.h	/^  int			alloc_nodes;	\/* Allocated nodes in index *\/$/;"	m	struct:mxml_index_s
attr	mxml.h	/^  char			*attr;		\/* Attribute used for indexing or NULL *\/$/;"	m	struct:mxml_index_s
attrs	mxml.h	/^  mxml_attr_t		*attrs;		\/* Attributes *\/$/;"	m	struct:mxml_element_s
buffer	mxml-file.c	/^                buffer[8192];                \/* Character buffer *\/$/;"	m	struct:_mxml_fdbuf_s	file:
child	mxml.h	/^  struct mxml_node_s	*child;		\/* First child node *\/$/;"	m	struct:mxml_node_s	typeref:struct:mxml_node_s::mxml_node_s
cur_node	mxml.h	/^  int			cur_node;	\/* Current node *\/$/;"	m	struct:mxml_index_s
current	mxml-file.c	/^  unsigned char        *current,                \/* Current position in buffer *\/$/;"	m	struct:_mxml_fdbuf_s	file:
custom	mxml.h	/^  mxml_custom_t		custom;		\/* Custom data @since Mini-XML 2.1@ *\/$/;"	m	union:mxml_value_u
custom_load_cb	mxml-private.h	/^  mxml_custom_load_cb_t	custom_load_cb;$/;"	m	struct:_mxml_global_s
custom_save_cb	mxml-private.h	/^  mxml_custom_save_cb_t	custom_save_cb;$/;"	m	struct:_mxml_global_s
data	mxml.h	/^  void			*data;		\/* Pointer to (allocated) custom data *\/$/;"	m	struct:mxml_custom_s
destroy	mxml.h	/^  mxml_custom_destroy_cb_t destroy;	\/* Pointer to destructor function *\/$/;"	m	struct:mxml_custom_s
element	mxml.h	/^  mxml_element_t	element;	\/* Element *\/$/;"	m	union:mxml_value_u
end	mxml-file.c	/^                *end,                        \/* End of buffer *\/$/;"	m	struct:_mxml_fdbuf_s	file:
entity_cbs	mxml-private.h	/^  int	(*entity_cbs[100])(const char *name);$/;"	m	struct:_mxml_global_s
error_cb	mxml-private.h	/^  void	(*error_cb)(const char *);$/;"	m	struct:_mxml_global_s
event_counts	testmxml.c	/^int		event_counts[6];$/;"	v
fd	mxml-file.c	/^  int                fd;                        \/* File descriptor *\/$/;"	m	struct:_mxml_fdbuf_s	file:
find_public	mxmldoc.c	/^find_public(mxml_node_t *node,		\/* I - Current node *\/$/;"	f	file:
get_comment_info	mxmldoc.c	/^get_comment_info($/;"	f	file:
get_text	mxmldoc.c	/^get_text(mxml_node_t *node,		\/* I - Node to get *\/$/;"	f	file:
index_compare	mxml-index.c	/^index_compare(mxml_index_t *ind,	\/* I - Index *\/$/;"	f	file:
index_find	mxml-index.c	/^index_find(mxml_index_t *ind,		\/* I - Index *\/$/;"	f	file:
index_sort	mxml-index.c	/^index_sort(mxml_index_t *ind,		\/* I - Index to sort *\/$/;"	f	file:
inline	config.h	42;"	d
integer	mxml.h	/^  int			integer;	\/* Integer number *\/$/;"	m	union:mxml_value_u
last_child	mxml.h	/^  struct mxml_node_s	*last_child;	\/* Last child node *\/$/;"	m	struct:mxml_node_s	typeref:struct:mxml_node_s::mxml_node_s
load_cb	mxmldoc.c	/^load_cb(mxml_node_t *node)		\/* I - Node *\/$/;"	f	file:
main	mxmldoc.c	/^main(int  argc,				\/* I - Number of command-line args *\/$/;"	f
main	testmxml.c	/^main(int  argc,				\/* I - Number of command-line args *\/$/;"	f
mxmlAdd	mxml-node.c	/^mxmlAdd(mxml_node_t *parent,		\/* I - Parent node *\/$/;"	f
mxmlDelete	mxml-node.c	/^mxmlDelete(mxml_node_t *node)		\/* I - Node to delete *\/$/;"	f
mxmlElementDeleteAttr	mxml-attr.c	/^mxmlElementDeleteAttr(mxml_node_t *node,\/* I - Element *\/$/;"	f
mxmlElementGetAttr	mxml-attr.c	/^mxmlElementGetAttr(mxml_node_t *node,	\/* I - Element node *\/$/;"	f
mxmlElementSetAttr	mxml-attr.c	/^mxmlElementSetAttr(mxml_node_t *node,	\/* I - Element node *\/$/;"	f
mxmlElementSetAttrf	mxml-attr.c	/^mxmlElementSetAttrf(mxml_node_t *node,	\/* I - Element node *\/$/;"	f
mxmlEntityAddCallback	mxml-entity.c	/^mxmlEntityAddCallback($/;"	f
mxmlEntityGetName	mxml-entity.c	/^mxmlEntityGetName(int val)		\/* I - Character value *\/$/;"	f
mxmlEntityGetValue	mxml-entity.c	/^mxmlEntityGetValue(const char *name)	\/* I - Entity name *\/$/;"	f
mxmlEntityRemoveCallback	mxml-entity.c	/^mxmlEntityRemoveCallback(int (*cb)(const char *name))$/;"	f
mxmlFindElement	mxml-search.c	/^mxmlFindElement(mxml_node_t *node,	\/* I - Current node *\/$/;"	f
mxmlIndexDelete	mxml-index.c	/^mxmlIndexDelete(mxml_index_t *ind)	\/* I - Index to delete *\/$/;"	f
mxmlIndexEnum	mxml-index.c	/^mxmlIndexEnum(mxml_index_t *ind)	\/* I - Index to enumerate *\/$/;"	f
mxmlIndexFind	mxml-index.c	/^mxmlIndexFind(mxml_index_t *ind,	\/* I - Index to search *\/$/;"	f
mxmlIndexNew	mxml-index.c	/^mxmlIndexNew(mxml_node_t *node,		\/* I - XML node tree *\/$/;"	f
mxmlIndexReset	mxml-index.c	/^mxmlIndexReset(mxml_index_t *ind)	\/* I - Index to reset *\/$/;"	f
mxmlLoadFd	mxml-file.c	/^mxmlLoadFd(mxml_node_t    *top,                \/* I - Top node *\/$/;"	f
mxmlLoadFile	mxml-file.c	/^mxmlLoadFile(mxml_node_t    *top,        \/* I - Top node *\/$/;"	f
mxmlLoadString	mxml-file.c	/^mxmlLoadString(mxml_node_t    *top,        \/* I - Top node *\/$/;"	f
mxmlNewCDATA	mxml-node.c	/^mxmlNewCDATA(mxml_node_t *parent,	\/* I - Parent node or MXML_NO_PARENT *\/$/;"	f
mxmlNewCustom	mxml-node.c	/^mxmlNewCustom($/;"	f
mxmlNewElement	mxml-node.c	/^mxmlNewElement(mxml_node_t *parent,	\/* I - Parent node or MXML_NO_PARENT *\/$/;"	f
mxmlNewInteger	mxml-node.c	/^mxmlNewInteger(mxml_node_t *parent,	\/* I - Parent node or MXML_NO_PARENT *\/$/;"	f
mxmlNewOpaque	mxml-node.c	/^mxmlNewOpaque(mxml_node_t *parent,	\/* I - Parent node or MXML_NO_PARENT *\/$/;"	f
mxmlNewReal	mxml-node.c	/^mxmlNewReal(mxml_node_t *parent,	\/* I - Parent node or MXML_NO_PARENT *\/$/;"	f
mxmlNewText	mxml-node.c	/^mxmlNewText(mxml_node_t *parent,	\/* I - Parent node or MXML_NO_PARENT *\/$/;"	f
mxmlNewTextf	mxml-node.c	/^mxmlNewTextf(mxml_node_t *parent,	\/* I - Parent node or MXML_NO_PARENT *\/$/;"	f
mxmlNewXML	mxml-node.c	/^mxmlNewXML(const char *version)		\/* I - Version number to use *\/$/;"	f
mxmlRelease	mxml-node.c	/^mxmlRelease(mxml_node_t *node)		\/* I - Node *\/$/;"	f
mxmlRemove	mxml-node.c	/^mxmlRemove(mxml_node_t *node)		\/* I - Node to remove *\/$/;"	f
mxmlRetain	mxml-node.c	/^mxmlRetain(mxml_node_t *node)		\/* I - Node *\/$/;"	f
mxmlSAXLoadFd	mxml-file.c	/^mxmlSAXLoadFd(mxml_node_t    *top,        \/* I - Top node *\/$/;"	f
mxmlSAXLoadFile	mxml-file.c	/^mxmlSAXLoadFile($/;"	f
mxmlSAXLoadString	mxml-file.c	/^mxmlSAXLoadString($/;"	f
mxmlSaveAllocString	mxml-file.c	/^mxmlSaveAllocString($/;"	f
mxmlSaveFd	mxml-file.c	/^mxmlSaveFd(mxml_node_t    *node,        \/* I - Node to write *\/$/;"	f
mxmlSaveFile	mxml-file.c	/^mxmlSaveFile(mxml_node_t    *node,        \/* I - Node to write *\/$/;"	f
mxmlSaveString	mxml-file.c	/^mxmlSaveString(mxml_node_t    *node,        \/* I - Node to write *\/$/;"	f
mxmlSetCDATA	mxml-set.c	/^mxmlSetCDATA(mxml_node_t *node,		\/* I - Node to set *\/$/;"	f
mxmlSetCustom	mxml-set.c	/^mxmlSetCustom($/;"	f
mxmlSetCustomHandlers	mxml-file.c	/^mxmlSetCustomHandlers($/;"	f
mxmlSetElement	mxml-set.c	/^mxmlSetElement(mxml_node_t *node,	\/* I - Node to set *\/$/;"	f
mxmlSetErrorCallback	mxml-file.c	/^mxmlSetErrorCallback(mxml_error_cb_t cb)\/* I - Error callback function *\/$/;"	f
mxmlSetInteger	mxml-set.c	/^mxmlSetInteger(mxml_node_t *node,	\/* I - Node to set *\/$/;"	f
mxmlSetOpaque	mxml-set.c	/^mxmlSetOpaque(mxml_node_t *node,	\/* I - Node to set *\/$/;"	f
mxmlSetReal	mxml-set.c	/^mxmlSetReal(mxml_node_t *node,		\/* I - Node to set *\/$/;"	f
mxmlSetText	mxml-set.c	/^mxmlSetText(mxml_node_t *node,		\/* I - Node to set *\/$/;"	f
mxmlSetTextf	mxml-set.c	/^mxmlSetTextf(mxml_node_t *node,		\/* I - Node to set *\/$/;"	f
mxmlSetWrapMargin	mxml-file.c	/^mxmlSetWrapMargin(int column)                \/* I - Column for wrapping *\/$/;"	f
mxmlWalkNext	mxml-search.c	/^mxmlWalkNext(mxml_node_t *node,		\/* I - Current node *\/$/;"	f
mxmlWalkPrev	mxml-search.c	/^mxmlWalkPrev(mxml_node_t *node,		\/* I - Current node *\/$/;"	f
mxml_add_char	mxml-file.c	/^mxml_add_char(int  ch,                        \/* I  - Character to add *\/$/;"	f	file:
mxml_attr_s	mxml.h	/^typedef struct mxml_attr_s		\/**** An XML element attribute value. ****\/$/;"	s
mxml_attr_t	mxml.h	/^} mxml_attr_t;$/;"	t	typeref:struct:mxml_attr_s
mxml_bad_char	mxml-file.c	79;"	d	file:
mxml_custom_destroy_cb_t	mxml.h	/^typedef void (*mxml_custom_destroy_cb_t)(void *);$/;"	t
mxml_custom_load_cb_t	mxml.h	/^typedef int (*mxml_custom_load_cb_t)(mxml_node_t *, const char *);$/;"	t
mxml_custom_s	mxml.h	/^typedef struct mxml_custom_s		\/**** An XML custom value. @since Mini-XML 2.1@ ****\/$/;"	s
mxml_custom_save_cb_t	mxml.h	/^typedef char *(*mxml_custom_save_cb_t)(mxml_node_t *);  $/;"	t
mxml_custom_t	mxml.h	/^} mxml_custom_t;$/;"	t	typeref:struct:mxml_custom_s
mxml_element_s	mxml.h	/^typedef struct mxml_element_s		\/**** An XML element value. ****\/$/;"	s
mxml_element_t	mxml.h	/^} mxml_element_t;$/;"	t	typeref:struct:mxml_element_s
mxml_error	mxml-private.c	/^mxml_error(const char *format,		\/* I - Printf-style format string *\/$/;"	f
mxml_error_cb_t	mxml.h	/^typedef void (*mxml_error_cb_t)(const char *);  $/;"	t
mxml_fd_getc	mxml-file.c	/^mxml_fd_getc(void *p,                        \/* I  - File descriptor buffer *\/$/;"	f	file:
mxml_fd_putc	mxml-file.c	/^mxml_fd_putc(int  ch,                        \/* I - Character *\/$/;"	f	file:
mxml_fd_read	mxml-file.c	/^mxml_fd_read(_mxml_fdbuf_t *buf)                \/* I - File descriptor buffer *\/$/;"	f	file:
mxml_fd_write	mxml-file.c	/^mxml_fd_write(_mxml_fdbuf_t *buf)        \/* I - File descriptor buffer *\/$/;"	f	file:
mxml_file_getc	mxml-file.c	/^mxml_file_getc(void *p,                        \/* I  - Pointer to file *\/$/;"	f	file:
mxml_file_putc	mxml-file.c	/^mxml_file_putc(int  ch,                        \/* I - Character to write *\/$/;"	f	file:
mxml_get_entity	mxml-file.c	/^mxml_get_entity(mxml_node_t *parent,        \/* I  - Parent node *\/$/;"	f	file:
mxml_ignore_cb	mxml-private.c	/^mxml_ignore_cb(mxml_node_t *node)	\/* I - Current node *\/$/;"	f
mxml_index_s	mxml.h	/^typedef struct mxml_index_s		\/**** An XML node index. ****\/$/;"	s
mxml_index_t	mxml.h	/^} mxml_index_t;$/;"	t	typeref:struct:mxml_index_s
mxml_integer_cb	mxml-private.c	/^mxml_integer_cb(mxml_node_t *node)	\/* I - Current node *\/$/;"	f
mxml_isspace	mxml-file.c	/^static inline int        mxml_isspace(int ch)$/;"	f	file:
mxml_load_cb_t	mxml.h	/^typedef mxml_type_t (*mxml_load_cb_t)(mxml_node_t *);$/;"	t
mxml_load_data	mxml-file.c	/^mxml_load_data($/;"	f	file:
mxml_new	mxml-node.c	/^mxml_new(mxml_node_t *parent,		\/* I - Parent node *\/$/;"	f	file:
mxml_node_s	mxml.h	/^typedef struct mxml_node_s		\/**** An XML node. ****\/$/;"	s
mxml_node_t	mxml.h	/^} mxml_node_t;$/;"	t	typeref:struct:mxml_node_s
mxml_opaque_cb	mxml-private.c	/^mxml_opaque_cb(mxml_node_t *node)	\/* I - Current node *\/$/;"	f
mxml_parse_element	mxml-file.c	/^mxml_parse_element($/;"	f	file:
mxml_real_cb	mxml-private.c	/^mxml_real_cb(mxml_node_t *node)		\/* I - Current node *\/$/;"	f
mxml_save_cb_t	mxml.h	/^typedef const char *(*mxml_save_cb_t)(mxml_node_t *, int);$/;"	t
mxml_sax_cb_t	mxml.h	/^typedef void (*mxml_sax_cb_t)(mxml_node_t *, mxml_sax_event_t, void *);  $/;"	t
mxml_sax_event_e	mxml.h	/^typedef enum mxml_sax_event_e		\/**** SAX event type. ****\/$/;"	g
mxml_sax_event_t	mxml.h	/^} mxml_sax_event_t;$/;"	t	typeref:enum:mxml_sax_event_e
mxml_set_attr	mxml-attr.c	/^mxml_set_attr(mxml_node_t *node,	\/* I - Element node *\/$/;"	f	file:
mxml_string_getc	mxml-file.c	/^mxml_string_getc(void *p,                \/* I  - Pointer to file *\/$/;"	f	file:
mxml_string_putc	mxml-file.c	/^mxml_string_putc(int  ch,                \/* I - Character to write *\/$/;"	f	file:
mxml_text_s	mxml.h	/^typedef struct mxml_text_s		\/**** An XML text value. ****\/$/;"	s
mxml_text_t	mxml.h	/^} mxml_text_t;$/;"	t	typeref:struct:mxml_text_s
mxml_type_e	mxml.h	/^typedef enum mxml_type_e		\/**** The XML node type. ****\/$/;"	g
mxml_type_t	mxml.h	/^} mxml_type_t;$/;"	t	typeref:enum:mxml_type_e
mxml_value_t	mxml.h	/^} mxml_value_t;$/;"	t	typeref:union:mxml_value_u
mxml_value_u	mxml.h	/^typedef union mxml_value_u		\/**** An XML node value. ****\/$/;"	u
mxml_write_name	mxml-file.c	/^mxml_write_name(const char *s,                \/* I - Name to write *\/$/;"	f	file:
mxml_write_node	mxml-file.c	/^mxml_write_node(mxml_node_t     *node,        \/* I - Node to write *\/$/;"	f	file:
mxml_write_string	mxml-file.c	/^mxml_write_string($/;"	f	file:
mxml_write_ws	mxml-file.c	/^mxml_write_ws(mxml_node_t     *node,        \/* I - Current node *\/$/;"	f	file:
name	mxml.h	/^  char			*name;		\/* Attribute name *\/$/;"	m	struct:mxml_attr_s
name	mxml.h	/^  char			*name;		\/* Name of element *\/$/;"	m	struct:mxml_element_s
new_documentation	mxmldoc.c	/^new_documentation(mxml_node_t **mxmldoc)\/* O - mxmldoc node *\/$/;"	f	file:
next	mxml.h	/^  struct mxml_node_s	*next;		\/* Next node under same parent *\/$/;"	m	struct:mxml_node_s	typeref:struct:mxml_node_s::mxml_node_s
nodes	mxml.h	/^  mxml_node_t		**nodes;	\/* Node array *\/$/;"	m	struct:mxml_index_s
num_attrs	mxml.h	/^  int			num_attrs;	\/* Number of attributes *\/$/;"	m	struct:mxml_element_s
num_entity_cbs	mxml-private.h	/^  int	num_entity_cbs;$/;"	m	struct:_mxml_global_s
num_nodes	mxml.h	/^  int			num_nodes;	\/* Number of nodes in index *\/$/;"	m	struct:mxml_index_s
opaque	mxml.h	/^  char			*opaque;	\/* Opaque string *\/$/;"	m	union:mxml_value_u
parent	mxml.h	/^  struct mxml_node_s	*parent;	\/* Parent node *\/$/;"	m	struct:mxml_node_s	typeref:struct:mxml_node_s::mxml_node_s
prev	mxml.h	/^  struct mxml_node_s	*prev;		\/* Previous node under same parent *\/$/;"	m	struct:mxml_node_s	typeref:struct:mxml_node_s::mxml_node_s
real	mxml.h	/^  double		real;		\/* Real number *\/$/;"	m	union:mxml_value_u
ref_count	mxml.h	/^  int			ref_count;	\/* Use count *\/$/;"	m	struct:mxml_node_s
safe_strcpy	mxmldoc.c	/^safe_strcpy(char       *dst,		\/* I - Destination string *\/$/;"	f	file:
sax_cb	testmxml.c	/^sax_cb(mxml_node_t      *node,		\/* I - Current node *\/$/;"	f
scan_file	mxmldoc.c	/^scan_file(const char  *filename,	\/* I - Filename *\/$/;"	f	file:
snprintf	config.h	81;"	d
sort_node	mxmldoc.c	/^sort_node(mxml_node_t *tree,		\/* I - Tree to sort into *\/$/;"	f	file:
strdup	config.h	73;"	d
string	mxml.h	/^  char			*string;	\/* Fragment string *\/$/;"	m	struct:mxml_text_s
text	mxml.h	/^  mxml_text_t		text;		\/* Text fragment *\/$/;"	m	union:mxml_value_u
type	mxml.h	/^  mxml_type_t		type;		\/* Node type *\/$/;"	m	struct:mxml_node_s
type_cb	testmxml.c	/^type_cb(mxml_node_t *node)		\/* I - Element node *\/$/;"	f
update_comment	mxmldoc.c	/^update_comment(mxml_node_t *parent,	\/* I - Parent node *\/$/;"	f	file:
usage	mxmldoc.c	/^usage(const char *option)		\/* I - Unknown option *\/$/;"	f	file:
user_data	mxml.h	/^  void			*user_data;	\/* User data *\/$/;"	m	struct:mxml_node_s
value	mxml.h	/^  char			*value;		\/* Attribute value *\/$/;"	m	struct:mxml_attr_s
value	mxml.h	/^  mxml_value_t		value;		\/* Node value *\/$/;"	m	struct:mxml_node_s
vsnprintf	config.h	86;"	d
whitespace	mxml.h	/^  int			whitespace;	\/* Leading whitespace? *\/$/;"	m	struct:mxml_text_s
whitespace_cb	testmxml.c	/^whitespace_cb(mxml_node_t *node,	\/* I - Element node *\/$/;"	f
wrap	mxml-private.h	/^  int	wrap;$/;"	m	struct:_mxml_global_s
write_description	mxmldoc.c	/^write_description($/;"	f	file:
write_element	mxmldoc.c	/^write_element(FILE        *out,		\/* I - Output file *\/$/;"	f	file:
write_file	mxmldoc.c	/^write_file(FILE       *out,		\/* I - Output file *\/$/;"	f	file:
write_function	mxmldoc.c	/^write_function(FILE        *out,	\/* I - Output file *\/$/;"	f	file:
write_html	mxmldoc.c	/^write_html(const char  *section,	\/* I - Section *\/$/;"	f	file:
write_html_head	mxmldoc.c	/^write_html_head(FILE       *out,	\/* I - Output file *\/$/;"	f	file:
write_man	mxmldoc.c	/^write_man(const char  *man_name,	\/* I - Name of manpage *\/$/;"	f	file:
write_scu	mxmldoc.c	/^write_scu(FILE        *out,	\/* I - Output file *\/$/;"	f	file:
write_string	mxmldoc.c	/^write_string(FILE       *out,		\/* I - Output file *\/$/;"	f	file:
write_toc	mxmldoc.c	/^write_toc(FILE        *out,		\/* I - Output file *\/$/;"	f	file:
ws_cb	mxmldoc.c	/^ws_cb(mxml_node_t *node,		\/* I - Element node *\/$/;"	f	file:
